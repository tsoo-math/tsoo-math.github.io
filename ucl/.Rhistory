}
prob-pois <- function(x){
n = x[1]
lambda = x[2]
P = exp(-lambda) * (lambda^n) / n!
P
}
prob-pois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / n!
p
}
prob-pois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / factorial(n)
p
}
probpois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / factorial(n)
p
}
probpois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / factorial(n)
p
}
probpois(c(0,1))
exp(-1)
probpois(c(2,3))
dpois(2,3)
cumpois<- function(x){
n = x[1]
lambda = x[2]
sum=0
for(i in 0:n){
sum <- prob( c(i, lambda)) + sum
}
sum
}
cumpois( c(2,3))
cumpois<- function(x){
n = x[1]
lambda = x[2]
sum=0
for(i in 0:n){
sum <- probpois( c(i, lambda)) + sum
}
sum
}
cumpois<- function(x){
n = x[1]
lambda = x[2]
sum=0
for(i in 0:n){
sum <- probpois( c(i, lambda)) + sum
}
sum
}
cumpois( c(2,3))
dpois(0,3)+ dpois(1,3) + dpois(2,3)
poisrv<- function(lambda){
u = runif(1)
m = -1
if( u < cumpois(c(0, lambda))){m <- 0}
i=1
while(m==-1){
if(u < cumpois(c(i,lambda))){m <-i}
i <- i+1
}
m
}
poisrv(2)
z = replicated(10000, poisrv(2.5))
z = replicate(10000, poisrv(2.5))
z
mean(z)
var(z)
hist(z, prob=TRUE)
sum(z==1)/10000
dpois(1,2.5)
ln(2.71)
log(2.71)
lambda = 2.3
inverseT <- function(y){
inv =-log(1-y) / lambda
inv
}
x = runif(10000)
z = inverseT(x)
hist(z, prob=TRUE)
mean(z)
1/mean(z)
hist(z, prob=TRUE)
curve(dexp(2.3), add=TRUE)
curve(dexp(x,2.3), add=TRUE)
hist(z, prob=TRUE, breaks=0.01)
hist(z, prob=TRUE, breaks=10)
hist(z, prob=TRUE, breaks=100)
curve(dexp(x,2.3), add=TRUE)
x=seq(0, 5, by=0.1)
x
ensity <- function(x){
d = 2/ sqrt(2 * pi) * exp( -x^2/2)
d
}
x=seq(0, 5, by=0.1)
plot(x, density(x))
density(x)
dposN <- function(x){
d = 2/ sqrt(2 * pi) * exp( -x^2/2)
d
}
x=seq(0, 5, by=0.1)
plot(x, dposN(x))
curve(dexp(x), add=TRUE)
exp(-0.5)
plot(x, dposN(x))
curve(2*dexp(x), add=TRUE)
curve(dexp(x), add=TRUE)
ar <- function(){
x = -5
while(x==-5){
u = runif(1)
y = rexp(1)
w = dposN(y)/2*dexp(y)
if( u < w){x <- y}
}
x
}
ar()
arfix<- function(){
x=(2*rbinom(1,1,0.5)-1)*ar()
x
}
arfix()
arfix()
arfix()
replicate(10000, arfix())
x=replicate(10000, arfix())
hist(x, prob=TRUE)
z = seq(-5,5, breaks=0.1)
z = seq(-5,5,0.1)
z
hist(x, prob=TRUE, z)
addcurve(dnorm(x), add=TRUE)
curve(dnorm(x), add=TRUE)
ar <- function(){
x = -5
while(x==-5){
u = runif(1)
y = rexp(1)
w = dposN(y)/(2*dexp(y))
if( u < w){x <- y}
}
x
}
arfix<- function(){
x=(2*rbinom(1,1,0.5)-1)*ar()
x
arfix<- function(){
x=(2*rbinom(1,1,0.5)-1)*ar()
x
}
x=replicate(10000, arfix())
x=replicate(10000, arfix())
}
sample(2, 52, replace=FALSE)
sample(52, 2, replace=FALSE)
deck = seq(1,52, 1)
deck[22]
deck[48]
deck
deck[22] <- 9
deck[22]
deck
T
xsample(52, 2, replace=FALSE)
x=sample(52, 2, replace=FALSE)
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
x
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
P <- matrix(c(0, 1/2, 1/2, 0, 0, 1/2, 0,0,0,1/2, 1/2,0,0, 1/2, 0, 0,0,0,1/2, 1/2, 1/3, 1/3, 0, 0, 1/3), nrow =5)
P <-t(P)
P
P[1,1\]
P[1,1]
P[1,2]
P[1,5]
P[i, ]
v = c(0,1, 0.2, 1)
v
cumsum(v)
step(i)<- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
step(2)
step(2)
step(2)
step(2)
step(2)
step(2)
step(2)
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
step(1)
step(3)
```{r}
u00 = runif(1)
x=-1
i=0
while(x==-1){
i<-i+1
if( u00 <=0.2*i){x<-i}
}
x
P <- matrix(c(0, 1/2, 1/2, 0, 0, 1/2, 0,0,0,1/2, 1/2,0,0, 1/2, 0, 0,0,0,1/2, 1/2, 1/3, 1/3, 0, 0, 1/3), nrow =5)
P <-t(P)
P
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
x <- c(x, step(x))
x
for (i in 1:100) {
x <- c(x, step(x))
}
x
P
q = P[5,]
q
cumsum(q)
P[5,1]
P[5,1]
P
P[5,]
step(1)
step(2)
step(3)
step(4)
step(5)
step(6)
initial <- function(){
u = runif(1)
x=-1
k=0
while(x==-1){
k<-k+1
if( u <=0.2*k){x<-k}
}
x
}
initial <- function(){
u = runif(1)
x=-1
k=0
while(x==-1){
k<-k+1
if( u <=0.2*k){x<-k}
}
x
}
initil()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initil()
initil()
initial()
initial()
initial()
initial()
initil()
initil()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
step(5)
step(1)
step(3)
step(4)
step(5)
step(5)
step(2)
step(1)
step(2)
step(5)
stepsind<- function(){
x=1
y=5
while(x[length(x)] != y[length(y)] ){
x< - c(x, step(x[length(x)]))
y< - c(y, step(y[length(x)]))
}
c(x,y)
}
stepsind()
x =c(1,2)
y = c(2,3)
x[length(x)]
y[length(x)]
P <- matrix(c(0, 1/2, 1/2, 0, 0, 1/2, 0,0,0,1/2, 1/2,0,0, 1/2, 0, 0,0,0,1/2, 1/2, 1/3, 1/3, 0, 0, 1/3), nrow =5)
P <-t(P)
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
step(1)
step(1)
step(1)
step(1)
step(1)
step(1)
step(3)
step(4)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(4)
x <- c(x, step(x[length(x)]))
x
x <- c(x, step(x[length(x)]))
x
x <- c(x, step(x[length(x)]))
x <- c(x, step(x[length(x)]))
x
x[length(x)] != y[length(y)]
x[length(x)] != 5
x=1
y=5
x
y
x< - c(x, step(x[length(x)]))
y< - c(y, step(y[length(y)]))
x<- c(x, step(x[length(x)]))
y<- c(y, step(y[length(y)]))
c(x,y)
z=c(x,y)
z
