q
cumsum(q)
P[5,1]
P[5,1]
P
P[5,]
step(1)
step(2)
step(3)
step(4)
step(5)
step(6)
initial <- function(){
u = runif(1)
x=-1
k=0
while(x==-1){
k<-k+1
if( u <=0.2*k){x<-k}
}
x
}
initial <- function(){
u = runif(1)
x=-1
k=0
while(x==-1){
k<-k+1
if( u <=0.2*k){x<-k}
}
x
}
initil()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initil()
initil()
initial()
initial()
initial()
initial()
initil()
initil()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
initial()
step(5)
step(1)
step(3)
step(4)
step(5)
step(5)
step(2)
step(1)
step(2)
step(5)
stepsind<- function(){
x=1
y=5
while(x[length(x)] != y[length(y)] ){
x< - c(x, step(x[length(x)]))
y< - c(y, step(y[length(x)]))
}
c(x,y)
}
stepsind()
x =c(1,2)
y = c(2,3)
x[length(x)]
y[length(x)]
P <- matrix(c(0, 1/2, 1/2, 0, 0, 1/2, 0,0,0,1/2, 1/2,0,0, 1/2, 0, 0,0,0,1/2, 1/2, 1/3, 1/3, 0, 0, 1/3), nrow =5)
P <-t(P)
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
step(1)
step(1)
step(1)
step(1)
step(1)
step(1)
step(3)
step(4)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(5)
step(4)
x <- c(x, step(x[length(x)]))
x
x <- c(x, step(x[length(x)]))
x
x <- c(x, step(x[length(x)]))
x <- c(x, step(x[length(x)]))
x
x[length(x)] != y[length(y)]
x[length(x)] != 5
x=1
y=5
x
y
x< - c(x, step(x[length(x)]))
y< - c(y, step(y[length(y)]))
x<- c(x, step(x[length(x)]))
y<- c(y, step(y[length(y)]))
c(x,y)
z=c(x,y)
z
x = c(1,2)
y = c(2,1)
all(x==y)
all(x==y) == TRUE
all(x==y) == TRUE
sample(4,4, replace=FALSE)
sample(4,4, replace=FALSE)
sample(4,4, replace=FALSE)
sample(4,4, replace=FALSE)
sample(4,4, replace=FALSE)
sample(4,4, replace=FALSE)
sample(4,4, replace=FALSE)
seq(1,4,1)
x = seq(1,4,1)
x
x[3]
shuffle <- function(x){
t=sample(4, 2, replace=FALSE)
a=t[1]
b=t[2]
da = x[a]
db = x[b]
x[a] <- db
x[b] <- da
x
}
shuffle (sample(4,4, replace=FALSE))
shuffle (sample(4,4, replace=FALSE))
shuffle (sample(4,4, replace=FALSE))
all(x==y) = TRUE
x = c(1,2)
y = (2,1)
y = c(2,1)
all(x==y)
all(x==y) =FALSE
all(x==y) ==FALSE
x = c(1,2)
y = c(1,2)
all(x==y)
all(x==y) == TRUE
all(x==y) == FALSE
x = c(1,1,2)
y = c(1,1,3)
all(x==y)
sample(4,2, replace=FALSE)
sample(4,2, replace=FALSE)
sample(4,2, replace=FALSE)
deckx = seq(1,4,1)
decky = sample(4,4,replace=FALSE)
while( all(deckx== decky)==FALSE ){
decky <- sample(4,4, replace=FALSE)
n <-n+1
}
n=0
deckx = seq(1,4,1)
decky = sample(4,4,replace=FALSE)
while( all(deckx== decky)==FALSE ){
decky <- sample(4,4, replace=FALSE)
n <-n+1
}
n
n=0
deckx = seq(1,4,1)
decky = sample(4,4,replace=FALSE)
while( all(deckx== decky)==FALSE ){
decky <- sample(4,4, replace=FALSE)
n <-n+1
}
n
n=0
deckx = seq(1,4,1)
decky = sample(4,4,replace=FALSE)
while( all(deckx== decky)==FALSE ){
decky <- sample(4,4, replace=FALSE)
n <-n+1
}
n
n=0
deckx = seq(1,4,1)
decky = sample(4,4,replace=FALSE)
while( all(deckx== decky)==FALSE ){
decky <- sample(4,4, replace=FALSE)
n <-n+1
}
n
n=0
deckx = seq(1,4,1)
decky = sample(4,4,replace=FALSE)
while( all(deckx== decky)==FALSE ){
decky <- sample(4,4, replace=FALSE)
n <-n+1
}
n
shuffle(c(1,2,3,4))
shuffle(c(1,2,3,4))
shuffle(c(1,2,3,4))
shuffle(c(1,2,3,4))
shuffle(c(1,2,3,4))
shuffle(c(1,2,3,4))
deck = seq(1,3, 1)
deck
shuffle <- function(x){
t=sample(3, 2, replace=FALSE)
a=t[1]
b=t[2]
da = x[a]
db = x[b]
x[a] <- db
x[b] <- da
x
}
shuffle(c(1,2,3)
)
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
shuffle(c(1,2,3))
sample(3,3, replace=FALSE)
sample(3,3, replace=FALSE)
sample(3,3, replace=FALSE)
all( c(1,2,3) == c(2,1,2))
all( c(1,2,3) == c(2,1,2))
shuffle <- function(x){
if(rbinom(1,1,0.5) ==1 ){
t=sample(4, 2, replace=FALSE)
a=t[1]
b=t[2]
da = x[a]
db = x[b]
x[a] <- db
x[b] <- da
}
x
}
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
shuffle( c(1,2,3,4))
x = c(1,2)
y = c(2,3)
matrix(x,y)
matrix(x,y, nrow=2)
matrix(c(x,y))
matrix(c(x,y), nrow=2)
P <- matrix(c(1/4, 1/4, 1/2, 0,0,
1/4, 1/4,0,0,1/2,
1/4,0,0, 1/2, 1/4,
0,0,0,1/2, 1/2, 1/3, 1/3, 0, 0, 1/3), nrow =5)
P <-t(P)
P
P <- matrix(c(1/4, 1/4, 1/2, 0,0,
1/4, 1/4,0,0,1/2,
1/4,0,0, 1/2, 1/4,
0,0,0,1/2, 1/2, 1/5, 1/5, 1/5, 1/5, 1/5), nrow =5)
P <-t(P)
P
stepcoupled <- function(){
x=c(-1, -1, -1, -1, -1)
u = runif(1)
for(i in 1:5){
j=0
cumq = cumsum(P[i,])
while(x[i] ==-1){
j<-j+1
if(u <= cumq[j]){x[i] <-j}
}
}
x
}
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled()
stepcoupled <- function(zinit){
x=c(-1, -1, -1, -1, -1)
sameu = runif(1)
for(i in 1:5){
j=0
cumq = cumsum(P[zinit[i],])
while(x[i] ==-1){
j<-j+1
if(sameu <= cumq[j]){x[i] <-j}
}
}
x
}
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,2,3,4,5))
stepcoupled( c(1,2,3,4,5))
stepcoupled( c(1,2,3,4,5))
stepcoupled( c(1,2,3,4,5))
stepcoupled( c(1,2,3,4,5))
stepcoupled( c(1,2,3,4,5))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled <- function(zinput){
xoutput=c(-1, -1, -1, -1, -1)
sameu = runif(1)
for(i in 1:5){
j=0
cumq = cumsum(P[zinput[i],])
while(xoutput[i] ==-1){
j<-j+1
if(sameu <= cumq[j]){xoutput[i] <-j}
}
}
x
}
stepcoupled(c(1,1,1,1))
stepcoupled(c(1,1,1,1,1))
stepcoupled <- function(zinput){
xoutput=c(-1, -1, -1, -1, -1)
sameu = runif(1)
for(i in 1:5){
j=0
cumq = cumsum(P[zinput[i],])
while(xoutput[i] ==-1){
j<-j+1
if(sameu <= cumq[j]){xoutput[i] <-j}
}
}
xoutput
}
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
}
}
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
stepcoupled( c(1,1,1,1,1))
check <- function(x){
output= 1
a = x[1]
for (i in 2: length(X)){
if (x[i] != a){output <-0}
}
}
check( c(1,1,2))
check <- function(x){
output= 1
a = x[1]
for (i in 2: length(X)){
if (x[i] != a){output <-0}
}
output
}
check (c (1,1,1))
check (c(1,1,1))
check <- function(x){
output= 1
a = x[1]
for (i in 2: length(x)){
if (x[i] != a){output <-0}
}
output
}
check(c(1,1,1))
check(c(1,1,2))
check(c(1,1,2,1))
check(c(1,1,2,1,3))
check(c(2,2,2,2,2))
check(c(2,2,2,2,2))
check(c(2,2,2,2,2))
london <- function(){
x = c(1,2,3,4,5)
while(check(x==0)){
x <- stepcoupled(x)
}
x
}
london()
london <- function(){
x = c(1,2,3,4,5)
while(check(x)==0){
x <- stepcoupled(x)
}
x
}
london()
x=replicate(1000, london()[1])
x
sum(x==5)
su(x==5)
average(x==5)
mean(x==5)
eignen(P)
eigen(P)
eigen(t(P)
eigen(t(P))
eigen(t(P))
for (i in 1:1000)
{}
Q <-P
Q
for (i in 1:1000){
Q <- P %*% P
}
Q
for (i in 1:10000){
Q <- Q %*% Q}
Q
for (i in 1:10000){
}
Q <-P
for (i in 1:10000){
Q <- P %*% Q}
Q
mean(x==5)
