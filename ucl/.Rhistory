process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(100, process(walk()))
mean(z)
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & n <10000){
x<-step(x)
n<- n+1
n
}
x
}
process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(1000, process(walk()))
mean(z)
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & n <100000){
x<-step(x)
n<- n+1
n
}
x
}
process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(100, process(walk()))
mean(z)
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & n <100000){
x<-step(x)
n<- n+1
n
}
x
}
process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(100, process(walk()))
mean(z)
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & n <1000000){
x<-step(x)
n<- n+1
n
}
x
}
process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(100, process(walk()))
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & n sum(x^2)< 100000){
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & sum(x^2)< 100000){
x<-step(x)
n<- n+1
n
}
x
}
process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(100, process(walk()))
mean(z)
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & sum(x^2)< 1000000){
x<-step(x)
n<- n+1
n
}
x
}
process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(100, process(walk()))
mean(z)
step <-function(x){
y = sample(4,1, replace = TRUE)
if (y==1) {x<-x + c(0,1)}
if (y==2) {x<-x + c(1,0)}
if (y==3) {x<-x + c(0,-1)}
if (y==4) {x<-x + c(-1,0)}
x}
walk<-function(){
x = c(0,0)
x<-step(x)
n=1
while(sum(x^2) >0 & sum(x^2)< 100000){
x<-step(x)
n<- n+1
n
}
x
}
process<-function(x){
y =0
if (sum(x^2) >0){ y <- y+1}
y
}
z = replicate(100, process(walk()))
mean(z)
knitr::opts_chunk$set(echo = TRUE)
z <- runif(10, min=-1, max=1)
z
z <- rexp(10, 2)
z
z<- rpois(7, 1)
print(z)
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
{ans <-1}
ans
}
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
{ans <-1}
ans
}
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
{ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
{ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4)
{
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:(length(x)+1-4))
{
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:(length(x)+1-4))
{
if( x[i]==1 && x[i+1]==1 && x[i+2]==1 && x[i+3]==1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for (i in 1:(length(x)+1-4))
{
if ( x[i]==1 && x[i+1]==1 && x[i+2]==1 && x[i+3]==1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for (i in 1:(length(x)+1-4))
{
if ( x[i]==1 && x[i+1]==1 && x[i+2]==1 && x[i+3]==1 ){ans<- 1}
}
ans
}
x=c(1,1,1,1,0)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,1)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,0)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,1,1)
isFour(x)
x=c(1,1,1,1)
isFour(x)
x = c(1,1)
isFour(x)
x=c(1,1,1,1,1,1)
isFour(x)
rbinom(1, 20, 0.5)
isFour(rbinom(20,1,0.5))
rbinom(20,1,0.5)
coupled<-function(){
j = rbinom(1,1,2/3)
t = rbinom(1,1,3/4) * june
}
c(j,t)
coupled<-function(){
j= rbinom(1,1,2/3)
t= rbinom(1,1,3/4) * j
}
c(j,t)
}
coupled<-function(){
j= rbinom(1,1,2/3)
t= rbinom(1,1,3/4) * j
c(j,t)
}
coupled<-function(){
j= rbinom(1,1,2/3)
t= rbinom(1,1,3/4)*j
c(j,t)
}
coupled
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
replicate(1000, couple())
replicate(1000, coupled())
seqreplicate(1000, coupled())
seq=replicate(1000, coupled())
S=replicate(1000, coupled())
S[,1]
S[1,]
S[2,]
mean(S[1,])
mean(S[0,1])
mean(S[,1])
mean(S[2,])
S=replicate(10000, coupled())
mean(S[1,])
mean(S[2,])
mean(S[,1])
exit<-function(p){
x=0
n=0
while(x <5){
x <- (2*rbinom(1,1,p) -1)
n <- n+1
}
n
}
exit(2/3)
exit(2/3)
exit(1)
exit<-function(p){
x=0
n=0
while(x <5){
x <- x+(2*rbinom(1,1,p) -1)
n <- n+1
}
n
}
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
coupled
coupled()
coupled[1]
coupled()[1]
exitcoupled<-function(){
june =0
tessa =0
njune=0
ntessa=0
while(june < 5){
v = coupled()
june <- june + 2*v[1] -1
tessa <- june + 2*v[2] -1
njune <- 1+njune
ntessa <- 1 + ntessa}
while(tessa <5){
tessa <- tessa+ 2*rbinom(1,1,0.5) -1
ntessa <- 1 + ntessa
}
c(ntessa, njune)
}
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled<-function(){
june =0
tessa =0
njune=0
ntessa=0
while(june < 5){
v = coupled()
june <- june + 2*v[1] -1
tessa <- june + 2*v[2] -1
njune <- 1+njune
ntessa <- 1 + ntessa}
while(tessa <5){
tessa <- tessa+ 2*rbinom(1,1,0.5) -1
ntessa <- 1 + ntessa
}
c(ntessa, njune)
}
coupled()[1]
coupled()[1]
exitcoupled
exitcoupled()
c= replicated(1000, exitcoupled())
c= replicate(1000, exitcoupled())
c[1,]
mean(c[1,])
mean(c[2,])
mean(replicate(exit(2/3))
)
mean(replicate(1000,(exit(2/3))
mean(replicate(1000,(exit(2/3)))
mean(replicate(1000,exit(2/3))
mean(replicate(1000,exit(2/3)))
mean(replicate(1000, exit(2/3)))
mean(replicate(1000, exit(1/2)))
