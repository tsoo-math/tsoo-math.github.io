explore(G)
G= er(c(200, 0.5*log(200)/200)
)
G
explore(G)
explore(G)
G= er(c(100, 0.5*log(100)/100)
)
explore(G)
explore(G)
explore(G)
explore(G)
explore(G)
G= er(c(100, 0.5*log(100)/100)
)
explore(G)
explore(G)
G= er(c(50, 0.5*log(50)/50)
)
explore(G0)
explore(G)
G= er(c(50, 0.5*log(50)/50)
)
explore(G)
G= er(c(50, 0.5*log(50)/50)
)
explore(G)
G= er(c(50, 0.5*log(50)/50))
explore(G)
explore(G)
G= er(c(20, 0.5*log(25)/25))
G
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G0)
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
G= er(c(20, 0.5*log(25)/25))
explore(G)
shiny::runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp()
runApp()
install.packages("plotrix")
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
knitr::opts_chunk$set(echo = TRUE)
samplev <- function(){
path = steps( c(initial(), 100 )  )
z=  (sum(path) - 100*mstat)/sd(path)
z
}
y = replicate(1000, mcclt())
knitr::opts_chunk$set(echo = TRUE)
Zapprox <- function(){
z =   (sum(rexp(100,1)) -100)/10
z
}
y= replicate(1000, Zapprox())
hist(y, prob=TRUE, breaks=50)
curve(dnorm(x), add=TRUE)
P <- matrix(c(1/4,1/4, 1/2,1/4,1/4,1/2,1/8,1/4,5/8), nrow =3)
P <-t(P)
P
eigen(t(P))
z=eigen(t(P))$vector[,1]
stat <- z/sum(z)
stat
Q = P
for (i in 1:1000){
Q <- Q %*% P
}
Q
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
steps <- function(y){
x = y[1]
n = y[2]
for (i in 1:n){
x <- c(x, step(x[i]))
}
x
}
one = steps(c(1,1000))
two = steps(c(2,1000))
sum(one==3)/1000
sum(two==3)/1000
time <- function(i){
n =0
x=i
n <- n+1
x <-step(x)
while(x !=3){
n <-n+1
x <- step(x)
}
n
}
mean(replicate(1000, time(3)))
initial <- function(){
q = stat
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
mstat = 1*stat[1] + 2*stat[2] + 3*stat[3]
mcclt <- function(){
path = steps( c(initial(), 100 )  )
z=  (sum(path) - 100*mstat)/10
z
}
y = replicate(1000, mcclt())
hist(y, prob=TRUE, breaks=50)
knitr::opts_chunk$set(echo = TRUE)
Zapprox <- function(){
z =   (sum(rexp(100,1)) -100)/10
z
}
y= replicate(1000, Zapprox())
hist(y, prob=TRUE, breaks=50)
curve(dnorm(x), add=TRUE)
P <- matrix(c(1/4,1/4, 1/2,1/4,1/4,1/2,1/8,1/4,5/8), nrow =3)
P <-t(P)
P
eigen(t(P))
z=eigen(t(P))$vector[,1]
stat <- z/sum(z)
stat
Q = P
for (i in 1:1000){
Q <- Q %*% P
}
Q
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
steps <- function(y){
x = y[1]
n = y[2]
for (i in 1:n){
x <- c(x, step(x[i]))
}
x
}
one = steps(c(1,1000))
two = steps(c(2,1000))
sum(one==3)/1000
sum(two==3)/1000
time <- function(i){
n =0
x=i
n <- n+1
x <-step(x)
while(x !=3){
n <-n+1
x <- step(x)
}
n
}
mean(replicate(1000, time(3)))
knitr::opts_chunk$set(echo = TRUE)
Zapprox <- function(){
z =   (sum(rexp(100,1)) -100)/10
z
}
y= replicate(1000, Zapprox())
hist(y, prob=TRUE, breaks=50)
curve(dnorm(x), add=TRUE)
P <- matrix(c(1/4,1/4, 1/2,1/4,1/4,1/2,1/8,1/4,5/8), nrow =3)
P <-t(P)
P
eigen(t(P))
z=eigen(t(P))$vector[,1]
stat <- z/sum(z)
stat
Q = P
for (i in 1:1000){
Q <- Q %*% P
}
Q
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
steps <- function(y){
x = y[1]
n = y[2]
for (i in 1:n){
x <- c(x, step(x[i]))
}
x
}
one = steps(c(1,1000))
two = steps(c(2,1000))
sum(one==3)/1000
sum(two==3)/1000
time <- function(i){
n =0
x=i
n <- n+1
x <-step(x)
while(x !=3){
n <-n+1
x <- step(x)
}
n
}
mean(replicate(1000, time(3)))
initial <- function(){
q = stat
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
mstat = 1*stat[1] + 2*stat[2] + 3*stat[3]
mcclt <- function(){
path = steps( c(initial(), 100 )  )
z=  (sum(path) - 100*mstat)/10
z
}
y = replicate(1000, mcclt())
hist(y, prob=TRUE, breaks=50)
knitr::opts_chunk$set(echo = TRUE)
Zapprox <- function(){
z =   (sum(rexp(100,1)) -100)/10
z
}
y= replicate(1000, Zapprox())
hist(y, prob=TRUE, breaks=50)
curve(dnorm(x), add=TRUE)
P <- matrix(c(1/4,1/4, 1/2,1/4,1/4,1/2,1/8,1/4,5/8), nrow =3)
P <-t(P)
P
eigen(t(P))
z=eigen(t(P))$vector[,1]
stat <- z/sum(z)
stat
Q = P
for (i in 1:1000){
Q <- Q %*% P
}
Q
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
steps <- function(y){
x = y[1]
n = y[2]
for (i in 1:n){
x <- c(x, step(x[i]))
}
x
}
one = steps(c(1,1000))
two = steps(c(2,1000))
sum(one==3)/1000
sum(two==3)/1000
time <- function(i){
n =0
x=i
n <- n+1
x <-step(x)
while(x !=3){
n <-n+1
x <- step(x)
}
n
}
mean(replicate(1000, time(3)))
initial <- function(){
q = stat
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
mstat = 1*stat[1] + 2*stat[2] + 3*stat[3]
mcclt <- function(){
path = steps( c(initial(), 100 )  )
z=  (sum(path) - 100*mstat)/10
z
}
y = replicate(1000, mcclt())
hist(y, prob=TRUE, breaks=50)
knitr::opts_chunk$set(echo = TRUE)
Zapprox <- function(){
z =   (sum(rexp(100,1)) -100)/10
z
}
y= replicate(1000, Zapprox())
hist(y, prob=TRUE, breaks=50)
curve(dnorm(x), add=TRUE)
P <- matrix(c(1/4,1/4, 1/2,1/4,1/4,1/2,1/8,1/4,5/8), nrow =3)
P <-t(P)
P
eigen(t(P))
z=eigen(t(P))$vector[,1]
stat <- z/sum(z)
stat
Q = P
for (i in 1:1000){
Q <- Q %*% P
}
Q
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
steps <- function(y){
x = y[1]
n = y[2]
for (i in 1:n){
x <- c(x, step(x[i]))
}
x
}
one = steps(c(1,1000))
two = steps(c(2,1000))
sum(one==3)/1000
sum(two==3)/1000
time <- function(i){
n =0
x=i
n <- n+1
x <-step(x)
while(x !=3){
n <-n+1
x <- step(x)
}
n
}
mean(replicate(1000, time(3)))
knitr::opts_chunk$set(echo = TRUE)
Zapprox <- function(){
z =   (sum(rexp(100,1)) -100)/10
z
}
y= replicate(1000, Zapprox())
hist(y, prob=TRUE, breaks=50)
curve(dnorm(x), add=TRUE)
P <- matrix(c(1/4,1/4, 1/2,1/4,1/4,1/2,1/8,1/4,5/8), nrow =3)
P <-t(P)
P
eigen(t(P))
z=eigen(t(P))$vector[,1]
stat <- z/sum(z)
stat
Q = P
for (i in 1:1000){
Q <- Q %*% P
}
Q
step <- function(i){
q = P[i,]
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
steps <- function(y){
x = y[1]
n = y[2]
for (i in 1:n){
x <- c(x, step(x[i]))
}
x
}
one = steps(c(1,1000))
two = steps(c(2,1000))
sum(one==3)/1000
sum(two==3)/1000
time <- function(i){
n =0
x=i
n <- n+1
x <-step(x)
while(x !=3){
n <-n+1
x <- step(x)
}
n
}
mean(replicate(1000, time(3)))
initial <- function(){
q = stat
x=-1
u = runif(1)
j=0
cumq = cumsum(q)
while(x==-1){
j<-j+1
if(u <= cumq[j]){x <-j}
}
x
}
mstat = 1*stat[1] + 2*stat[2] + 3*stat[3]
mcclt <- function(){
path = steps( c(initial(), 100 )  )
z=  (sum(path) - 100*mstat)/10
z
}
y = replicate(1000, mcclt())
hist(y, prob=TRUE, breaks=50)
tinytex::reinstall_tinytex()
c = qnorm(alpha/2)
c = qnorm(0.05/2)
c
c = qnorm(0.05/2,lefttail=F)
c = qnorm(0.05/2,tail=F)
c = qnorm(0.05/2,lower.\tail=F)
c = qnorm(0.05/2,lower.tail=F)
c
qchisq(0.05,12)
qchisq(0.05,12, lower.tail=F)
q()
