A
x=c(1,2,3,4,5)
A[1,] <-x
A[1,]
rbinom(5, 1, 1/2)
seq(0, 3)
seq(0, 1)
seq(0, 0, 3)
seq(0, 0, 3)
seq(1, 1, 3)
seq(1, 3)
seq(1, 1)
seq(1)
seq(3.1)
seq(3.0)
seq(3.1)
seq(3,0)
seq(3,0)
seq(3,10)
seq(1,3,0)
seq(1,3,1)
matrix(0, 5,5)
rbinom(5, 1, 1/2)
er <-function(x){
n = x[1]
p = x[2]
A = matrix(0, n,n)
for(i in 1:(n-1)){
x= replicate(i, 0)
A[i,] <- c(x, rbinom(n-1, 1, p))
}
A
}
er(5,1/2)
er(c(5, 1/2)
)
er <-function(x){
n = x[1]
p = x[2]
A = matrix(0, n,n)
for(i in 1:(n-1)){
x= replicate(i, 0)
A[i,] <- c(x, rbinom(n-i, 1, p))
}
A
}
er(c(5, 1/2))
er(c(5, 1))
B = er(c(5,1))
B
B[lower.tri(B)] <- B[upper.tri(B)]
B
er <-function(x){
n = x[1]
p = x[2]
A = matrix(0, n,n)
for(i in 1:(n-1)){
x= replicate(i, 0)
A[i,] <- c(x, rbinom(n-i, 1, p))
}
A[lower.tri(A)] <- A[upper.tri(A)]
}
er((10, 1/2))
er(c(10, 1/2))
A = er(c(10, 1/2))
A
B[lower.tri(B)] <- B[upper.tri(B)]
B
er <-function(x){
n = x[1]
p = x[2]
A = matrix(0, n,n)
for(i in 1:(n-1)){
x= replicate(i, 0)
A[i,] <- c(x, rbinom(n-i, 1, p))
}
A[lower.tri(A)] <- A[upper.tri(A)]
A
}
er(c(10, 1/2))
A=er(c(10, 1/2))
A
A[10,2]
A[2,10]
B
lower.tri(B)
forceSymmetric(B)
er <-function(x){
n = x[1]
p = x[2]
A = matrix(0, n,n)
for(i in 1:(n-1)){
x= replicate(i, 0)
A[i,] <- c(x, rbinom(n-i, 1, p))
}
A <- A + tr(A)
A
}
A = er(c(5, 1/2))
er <-function(x){
n = x[1]
p = x[2]
A = matrix(0, n,n)
for(i in 1:(n-1)){
x= replicate(i, 0)
A[i,] <- c(x, rbinom(n-i, 1, p))
}
A <- A + t(A)
A
}
er(c(12, 1/2))
B=er(c(12, 1/2))
B
B - t(B)
x = c(1,2,3,4,5)
as.set(x)
set(x)
is.set(X)
duplicate(x)
duplicated(x)
x=c(1,2,3,4,5,5,5,5)
duplicated(x)
!duplicated(x)
x[!duplicated(x)]
x <- x[!duplicated(x)]
x
x = c(1,0,1,01)
x = c(1,0,1,0)
x
which.max(x)
which(x!=0)
y = which(!x =0)
y = which(x! =0)
y = which(x!=0)
z = c(y, 5)
z
z = c(y,3)
z
x=c(1,2,3)
y = c(4,5,6)
cbind(x,y)
z = cbind(x,y)
z
z[1,2]
x = c(1,2,3)
y = c(1,2)
z = cbind(x,y)
x[!duplicated(x)]
z
z=0
x <- NULL
x
x <-c(x, 1)
x
x <- null
x <-NULL
x
length(x)
z = c(0,0,0)
z
which(z!=0)
which(z!=0)
which(z!=``)
which(z!=1)
which(z!=0)
w=which(z!=0)
w
z=c(0,0,0,0,0,0,0,0,0)
x
z
which(z!=0)
w=which(z!=0)
w
y = c(1)
y
y = c(y, w)
y
w
length(w)
explore <- function(G){
bag =  which(A[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
for( i in 1:L){
level<-storage
storage <-NULL
storage <- c( storage, which(A[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!dupicated(bag)]
L<- length(storage)
}
}
sum( length(bag)==n)
}
G=er(c(5,1))
G
explore(G)
dim(G)
dim(G)[1]
explore <- function(G){
n = dim(G)[1]
bag =  which(A[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
for( i in 1:L){
level<-storage
storage <-NULL
storage <- c( storage, which(A[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!dupicated(bag)]
L<- length(storage)
}
}
sum( length(bag)==n)
}
G
explore(G)
explore <- function(G){
n = dim(G)[1]
bag =  which(A[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
for( i in 1:L){
level<-storage
storage <-NULL
storage <- c( storage, which(A[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
}
}
sum( length(bag)==n)
}
explore(G)
G
explore <- function(G){
n = dim(G)[1]
bag =  which(A[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
for( i in 1:L){
level<-storage
storage <-NULL
storage <- c( storage, which(A[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
}
}
c(sum( length(bag)==n), bag)
}
explore(G)
bag <- which(G[1, ]!=0)
bag
level <-bag
which(  G[level[1], i ]!=0  )
which(  G[level[1],  ]!=0  )
bag <- c(bag, storage)
storage =which(  G[level[1],  ]!=0  )
bag <- c(bag, storage)
bag
bag <- bad[!duplicated(bag)]
bag <- bag[!duplicated(bag)]
bag
G
explore(G)
explore <- function(G){
n = dim(G)[1]
bag =  which(G[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
for( i in 1:L){
level<-storage
storage <-NULL
storage <- c( storage, which(G[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
}
}
c(sum( length(bag)==n), bag)
}
explore <- function(G){
n = dim(G)[1]
bag =  which(G[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
level <-storage
storage<-NULL
for( i in 1:L){
storage <- c( storage, which(G[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
}
}
c(sum( length(bag)==n), bag)
}
G
explore(G)
G = er(c(7, 1/2)
G
G = er(c(7, 1/2))
G
explore(G)
G = er(c(7, 0.25))
G
explore(G)
G = er(c(7, 0.1))
G
explore(G)
explore <- function(G){
n = dim(G)[1]
bag =  which(G[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
level <-storage
storage<-NULL
for( i in 1:L){
storage <- c( storage, which(G[level[i],  ]!=0  ))
oldbag <-bag
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
if(length(oldbag)==length(bag)){L<-0}
}
}
c(sum( length(bag)==n), bag)
}
G
explore(G)
er(c(7, 0.2))
explore(G)
G=er(c(7, 0.2))
explore(G)
G
G=er(c(7, 0.1))
G
explore(G)
G=er(c(10, 0.1))
explore(G)
G
explore(G)
explore <- function(G){
n = dim(G)[1]
bag =  which(G[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
level <-storage
storage<-NULL
for( i in 1:L){
storage <- c( storage, which(G[level[i],  ]!=0  ))
oldbag <-bag
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
}
if(length(oldbag)==length(bag)){L<-0}
}
c(sum( length(bag)==n), bag)
}
explore(G)
G
explore <- function(G){
n = dim(G)[1]
bag =  which(G[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
level <-storage
storage<-NULL
oldbag <-bag
for( i in 1:L){
storage <- c( storage, which(G[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
}
if(length(oldbag)==length(bag)){L<-0}
}
c(sum( length(bag)==n), bag)
}
G
explor(G)
explore(G)
G=er(c(10, 0.1))
explore(G)
G
explore(G)
G
G
G=er(c(10, 0.1))
G
explore(G)
G=er(c(10, 0.2))
explore(G)
G=er(c(10, 0.3))
explore(G)
G
log(2.71)
er(  c(200, 0.5))
G=er(c(200, 0.5))
G
G
explore(G)
explore <- function(G){
n = dim(G)[1]
bag =  which(G[1,]!=0)
storage <- bag
L  = length(storage)
while(L > 0 & length(bag)<n ){
level <-storage
storage<-NULL
oldbag <-bag
for( i in 1:L){
storage <- c( storage, which(G[level[i],  ]!=0  ))
bag <- c(bag, storage)
bag <- bag[!duplicated(bag)]
L<- length(storage)
}
if(length(oldbag)==length(bag)){L<-0}
}
sum( length(bag)==n)
}
explore(G)
G= er(c(2000, 0.5)
)
explore(G)
G= er(c(200, 0.5*log(200)/200)
)
G
explore(G)
explore(G)
G= er(c(100, 0.5*log(100)/100)
)
explore(G)
explore(G)
explore(G)
explore(G)
explore(G)
G= er(c(100, 0.5*log(100)/100)
)
explore(G)
explore(G)
G= er(c(50, 0.5*log(50)/50)
)
explore(G0)
explore(G)
G= er(c(50, 0.5*log(50)/50)
)
explore(G)
G= er(c(50, 0.5*log(50)/50)
)
explore(G)
G= er(c(50, 0.5*log(50)/50))
explore(G)
explore(G)
G= er(c(20, 0.5*log(25)/25))
G
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G0)
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
explore(G)
G= er(c(20, 0.5*log(25)/25))
G= er(c(20, 0.5*log(25)/25))
explore(G)
shiny::runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp()
runApp()
install.packages("plotrix")
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
runApp('~/Poisson-disc')
