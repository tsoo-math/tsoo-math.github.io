isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
{ans <-1}
ans
}
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
{ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4){
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 )
{ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:length(x)+1-4)
{
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:(length(x)+1-4))
{
if( x[i]=1 && x[i+1]=1 && x[i+2]=1 && x[i+3]=1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for(i in 1:(length(x)+1-4))
{
if( x[i]==1 && x[i+1]==1 && x[i+2]==1 && x[i+3]==1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for (i in 1:(length(x)+1-4))
{
if ( x[i]==1 && x[i+1]==1 && x[i+2]==1 && x[i+3]==1 ){ans<- 1}
}
ans
}
isFour <- function(x){
ans=0
for (i in 1:(length(x)+1-4))
{
if ( x[i]==1 && x[i+1]==1 && x[i+2]==1 && x[i+3]==1 ){ans<- 1}
}
ans
}
x=c(1,1,1,1,0)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,1)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,0)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1)
isFour(x)
x=c(0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,1,1)
isFour(x)
x=c(1,1,1,1)
isFour(x)
x = c(1,1)
isFour(x)
x=c(1,1,1,1,1,1)
isFour(x)
rbinom(1, 20, 0.5)
isFour(rbinom(20,1,0.5))
rbinom(20,1,0.5)
coupled<-function(){
j = rbinom(1,1,2/3)
t = rbinom(1,1,3/4) * june
}
c(j,t)
coupled<-function(){
j= rbinom(1,1,2/3)
t= rbinom(1,1,3/4) * j
}
c(j,t)
}
coupled<-function(){
j= rbinom(1,1,2/3)
t= rbinom(1,1,3/4) * j
c(j,t)
}
coupled<-function(){
j= rbinom(1,1,2/3)
t= rbinom(1,1,3/4)*j
c(j,t)
}
coupled
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
coupled()
replicate(1000, couple())
replicate(1000, coupled())
seqreplicate(1000, coupled())
seq=replicate(1000, coupled())
S=replicate(1000, coupled())
S[,1]
S[1,]
S[2,]
mean(S[1,])
mean(S[0,1])
mean(S[,1])
mean(S[2,])
S=replicate(10000, coupled())
mean(S[1,])
mean(S[2,])
mean(S[,1])
exit<-function(p){
x=0
n=0
while(x <5){
x <- (2*rbinom(1,1,p) -1)
n <- n+1
}
n
}
exit(2/3)
exit(2/3)
exit(1)
exit<-function(p){
x=0
n=0
while(x <5){
x <- x+(2*rbinom(1,1,p) -1)
n <- n+1
}
n
}
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(2/3)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
exit(1/2)
coupled
coupled()
coupled[1]
coupled()[1]
exitcoupled<-function(){
june =0
tessa =0
njune=0
ntessa=0
while(june < 5){
v = coupled()
june <- june + 2*v[1] -1
tessa <- june + 2*v[2] -1
njune <- 1+njune
ntessa <- 1 + ntessa}
while(tessa <5){
tessa <- tessa+ 2*rbinom(1,1,0.5) -1
ntessa <- 1 + ntessa
}
c(ntessa, njune)
}
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled()
exitcoupled<-function(){
june =0
tessa =0
njune=0
ntessa=0
while(june < 5){
v = coupled()
june <- june + 2*v[1] -1
tessa <- june + 2*v[2] -1
njune <- 1+njune
ntessa <- 1 + ntessa}
while(tessa <5){
tessa <- tessa+ 2*rbinom(1,1,0.5) -1
ntessa <- 1 + ntessa
}
c(ntessa, njune)
}
coupled()[1]
coupled()[1]
exitcoupled
exitcoupled()
c= replicated(1000, exitcoupled())
c= replicate(1000, exitcoupled())
c[1,]
mean(c[1,])
mean(c[2,])
mean(replicate(exit(2/3))
)
mean(replicate(1000,(exit(2/3))
mean(replicate(1000,(exit(2/3)))
mean(replicate(1000,exit(2/3))
mean(replicate(1000,exit(2/3)))
mean(replicate(1000, exit(2/3)))
mean(replicate(1000, exit(1/2)))
prob<-function(i, lambda){
P <- exp(-lambda) * (lambda^i) / i!
P
prob<-function(i, lambda){
P =exp(-lambda) * (lambda^i) / i!
P
}
prob<-function(x){
i = x[1]
lambda = x[2]
P <-  exp(-lambda) * (lambda^i) / i!
P
}
prob-pois <- function(x){
i = x[1]
lambda = x[2]
P <-  exp(-lambda) * (lambda^i) / i!
P
}
prob-pois <- function(x){
i = x[1]
lambda = x[2]
P =exp(-lambda) * (lambda^i) / i!
P
}
prob-pois <- function(x){
n = x[1]
lambda = x[2]
P = exp(-lambda) * (lambda^n) / n!
P
}
prob-pois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / n!
p
}
prob-pois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / factorial(n)
p
}
probpois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / factorial(n)
p
}
probpois <- function(x){
n = x[1]
lambda = x[2]
p = exp(-lambda) * (lambda^n) / factorial(n)
p
}
probpois(c(0,1))
exp(-1)
probpois(c(2,3))
dpois(2,3)
cumpois<- function(x){
n = x[1]
lambda = x[2]
sum=0
for(i in 0:n){
sum <- prob( c(i, lambda)) + sum
}
sum
}
cumpois( c(2,3))
cumpois<- function(x){
n = x[1]
lambda = x[2]
sum=0
for(i in 0:n){
sum <- probpois( c(i, lambda)) + sum
}
sum
}
cumpois<- function(x){
n = x[1]
lambda = x[2]
sum=0
for(i in 0:n){
sum <- probpois( c(i, lambda)) + sum
}
sum
}
cumpois( c(2,3))
dpois(0,3)+ dpois(1,3) + dpois(2,3)
poisrv<- function(lambda){
u = runif(1)
m = -1
if( u < cumpois(c(0, lambda))){m <- 0}
i=1
while(m==-1){
if(u < cumpois(c(i,lambda))){m <-i}
i <- i+1
}
m
}
poisrv(2)
z = replicated(10000, poisrv(2.5))
z = replicate(10000, poisrv(2.5))
z
mean(z)
var(z)
hist(z, prob=TRUE)
sum(z==1)/10000
dpois(1,2.5)
ln(2.71)
log(2.71)
lambda = 2.3
inverseT <- function(y){
inv =-log(1-y) / lambda
inv
}
x = runif(10000)
z = inverseT(x)
hist(z, prob=TRUE)
mean(z)
1/mean(z)
hist(z, prob=TRUE)
curve(dexp(2.3), add=TRUE)
curve(dexp(x,2.3), add=TRUE)
hist(z, prob=TRUE, breaks=0.01)
hist(z, prob=TRUE, breaks=10)
hist(z, prob=TRUE, breaks=100)
curve(dexp(x,2.3), add=TRUE)
x=seq(0, 5, by=0.1)
x
ensity <- function(x){
d = 2/ sqrt(2 * pi) * exp( -x^2/2)
d
}
x=seq(0, 5, by=0.1)
plot(x, density(x))
density(x)
dposN <- function(x){
d = 2/ sqrt(2 * pi) * exp( -x^2/2)
d
}
x=seq(0, 5, by=0.1)
plot(x, dposN(x))
curve(dexp(x), add=TRUE)
exp(-0.5)
plot(x, dposN(x))
curve(2*dexp(x), add=TRUE)
curve(dexp(x), add=TRUE)
ar <- function(){
x = -5
while(x==-5){
u = runif(1)
y = rexp(1)
w = dposN(y)/2*dexp(y)
if( u < w){x <- y}
}
x
}
ar()
arfix<- function(){
x=(2*rbinom(1,1,0.5)-1)*ar()
x
}
arfix()
arfix()
arfix()
replicate(10000, arfix())
x=replicate(10000, arfix())
hist(x, prob=TRUE)
z = seq(-5,5, breaks=0.1)
z = seq(-5,5,0.1)
z
hist(x, prob=TRUE, z)
addcurve(dnorm(x), add=TRUE)
curve(dnorm(x), add=TRUE)
ar <- function(){
x = -5
while(x==-5){
u = runif(1)
y = rexp(1)
w = dposN(y)/(2*dexp(y))
if( u < w){x <- y}
}
x
}
arfix<- function(){
x=(2*rbinom(1,1,0.5)-1)*ar()
x
arfix<- function(){
x=(2*rbinom(1,1,0.5)-1)*ar()
x
}
x=replicate(10000, arfix())
x=replicate(10000, arfix())
}
sample(2, 52, replace=FALSE)
sample(52, 2, replace=FALSE)
deck = seq(1,52, 1)
deck[22]
deck[48]
deck
deck[22] <- 9
deck[22]
deck
T
xsample(52, 2, replace=FALSE)
x=sample(52, 2, replace=FALSE)
x
